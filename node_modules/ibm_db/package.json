{
  "name": "ibm_db",
  "description": "IBM DB2 and IBM Informix bindings for node",
  "version": "0.0.19",
  "main": "lib/odbc.js",
  "homepage": "http://github.com/ibmdb/node-ibm_db/",
  "repository": {
    "type": "git",
    "url": "git://github.com/ibmdb/node-ibm_db.git"
  },
  "bugs": {
    "url": "https://github.com/ibmdb/node-ibm_db/issues"
  },
  "contributors": [
    {
      "name": "IBM",
      "email": "opendev@us.ibm.com"
    }
  ],
  "directories": {
    "example": "examples",
    "test": "test"
  },
  "engines": {
    "node": ">=0.8.0"
  },
  "scripts": {
    "install": "node installer/driverInstall.js",
    "test": "cd test && node run-tests.js"
  },
  "dependencies": {
    "bindings": "~1.0.0",
    "nan": "~2.2.0",
    "unzip": "~0.1.11",
    "tar.gz": "~0.1.1",
    "fstream": "~1.0.7"
  },
  "keywords": [
    "node",
    "odbc",
    "db2",
    "driver"
  ],
  "author": {
    "name": "IBM"
  },
  "license": "MIT",
  "gitHead": "0141a4241db40bddffaa677f02cbc50441ebc08f",
  "readme": "node-ibm_db\n-----------\n\nAn asynchronous/synchronous interface for node.js to IBM DB2 and IBM Informix.\n\n**Supported Platforms** - Windows64, MacOS64, Linuxx64, Linuxia32, AIX, Linux on z and Linux on Power PC.\n\ninstall\n--------\nYou may install the package using npm install command:\n\n```bash\nnpm install ibm_db\n```\nun-install\n----------\nTo uninstall node-ibm_db from your system, just delete the node-ibm_db or ibm_db directory.\n\nquick example\n-------------\n\n```javascript\nvar ibmdb = require('ibm_db');\n\nibmdb.open(\"DRIVER={DB2};DATABASE=<dbname>;HOSTNAME=<myhost>;UID=db2user;PWD=password;PORT=<dbport>;PROTOCOL=TCPIP\", function (err,conn) {\n  if (err) return console.log(err);\n  \n  conn.query('select 1 from sysibm.sysdummy1', function (err, data) {\n    if (err) console.log(err);\n    else console.log(data);\n\n    conn.close(function () {\n      console.log('done');\n    });\n  });\n});\n```\n\nFor z/OS and iSeries Connectivity\n---------------------------------\nFor connectivity against DB2 for LUW or Informix Server using node-ibm_db, no license file is required. However, if you want to use node-ibm_db against DB2 for z/OS or DB2 for i(AS400) Servers, you must have db2connect license for it. You can buy db2connect license from IBM. The connectivity can be enabled either on server using db2connectactivate utility or on client using client side license file. If you have client side license file, just copy it under `.../ibm_db/installer/clidriver/license` folder to be effective. \n\nFor AIX install issue\n---------------------\nIf `npm install ibm_db` aborts with \"Out Of Memory\" error on AIX, first run `ulimit -d unlimited` and then `npm install ibm_db`.\n\nFor MacOS Connectivity Issue\n----------------------------\nAfter `npm install ibm_db` run below command to avoid SQL1042C error:\n`export DYLD_LIBRARY_PATH=<node_modules_dir>/ibm_db/installer/clidriver/lib/icc:$DYLD_LIBRARYPATH`\n\nDiscussion Forums\n-----------------\nTo start a discussion or need help you can post a topic on node-ibm_db google group https://groups.google.com/forum/#!forum/node-ibm_db\n\napi\n---\n\n### Database\n\nThe simple api is based on instances of the `Database` class. You may get an \ninstance in one of the following ways:\n\n```javascript\nrequire(\"ibm_db\").open(connectionString, function (err, conn){\n  //conn is already open now if err is falsy\n});\n```\n\nor by using the helper function:\n\n```javascript\nvar ibmdb = require(\"ibm_db\")();\n``` \n\nor by creating an instance with the constructor function:\n\n```javascript\nvar Database = require(\"ibm_db\").Database\n  , ibmdb = new Database();\n```\n\n#### .open(connectionString, [options,] callback)\n\nOpen a connection to a database.\n\n* **connectionString** - The connection string for your database\n* **options** - _OPTIONAL_ - Object type. Can be used to avoid multiple \n    loading of native ODBC library for each call of `.open`.\n* **callback** - `callback (err, conn)`\n\n```javascript\nvar ibmdb = require(\"ibm_db\")\n  , connStr = \"DATABASE=dbname;HOSTNAME=hostname;PORT=port;PROTOCOL=TCPIP;UID=username;PWD=passwd\";\n\nibmdb.open(connStr, function (err, connection) {\n    if (err) \n    {\n      console.log(err);\n      return;\n    }\n    connection.query(\"select 1 from sysibm.sysdummy1\", function (err1, rows) {\n      if (err1) console.log(err1);\n      else console.log(rows);\n      connection.close(function(err2) { \n        if(err2) console.log(err2);\n      });\n    });\n});\n\n```\n\n#### .openSync(connectionString)\n\nSynchronously open a connection to a database.\n\n* **connectionString** - The connection string for your database\n\n```javascript\nvar ibmdb = require(\"ibm_db\"),\n\tcn = \"DATABASE=database;HOSTNAME=hostname;PORT=port;PROTOCOL=TCPIP;UID=username;PWD=password;\";\n\ntry {\n\tvar conn = ibmdb.openSync(connString);\n\tconn.query(\"select * from customers fetch first 10 rows only\", function (err, rows, moreResultSets) {\n\t\tif (err) {\n\t\t\tconsole.log(err);\n\t\t} else {\n\t\t  console.log(rows);\n\t\t}\n\t\tconn.close();\t\n\t});\n} catch (e) {\n\tconsole.log(e.message);\n}\n```\n\n#### .query(sqlQuery [, bindingParameters], callback)\n\nIssue an asynchronous SQL query to the database which is currently open.\n\n* **sqlQuery** - The SQL query to be executed.\n* **bindingParameters** - _OPTIONAL_ - An array of values that will be bound to\n    any '?' characters in `sqlQuery`.\n* **callback** - `callback (err, rows, moreResultSets)`\n\n```javascript\nvar ibmdb = require(\"ibm_db\")\n\t, cn = \"DATABASE=database;HOSTNAME=hostname;PORT=port;PROTOCOL=TCPIP;UID=username;PWD=password;\"\n\t;\n\nibmdb.open(cn, function (err, conn) {\n\tif (err) {\n\t\treturn console.log(err);\n\t}\n\n\t//we now have an open connection to the database\n\t//so lets get some data\n\tconn.query(\"select * from customers fetch first 10 rows only\", function (err, rows, moreResultSets) {\n\t\tif (err) {\n\t\t\tconsole.log(err);\n\t\t} else {\n\t\t\n\t\t  console.log(rows);\n\t\t}\n\n\t\t//if moreResultSets is truthy, then this callback function will be called\n\t\t//again with the next set of rows.\n\t});\n});\n```\n\n#### .querySync(sqlQuery [, bindingParameters])\n\nSynchronously issue a SQL query to the database that is currently open.\n\n* **sqlQuery** - The SQL query to be executed.\n* **bindingParameters** - _OPTIONAL_ - An array of values that will be bound to\n    any '?' characters in `sqlQuery`.\n\n```javascript\nvar ibmdb = require(\"ibm_db\")\n  , cn = \"DATABASE=database;HOSTNAME=hostname;PORT=port;PROTOCOL=TCPIP;UID=username;PWD=password;\"\n  ;\n\nibmdb.open(cn, function(err, conn){\n\n  //blocks until the query is completed and all data has been acquired\n  var rows = conn.querySync(\"select * from customers fetch first 10 rows only\");\n\n  console.log(rows);\n})\n```\n\n#### .close(callback)\n\nClose the currently opened database.\n\n* **callback** - `callback (err)`\n\n```javascript\nvar ibmdb = require(\"ibm_db\")\n\t, cn = \"DATABASE=database;HOSTNAME=hostname;PORT=port;PROTOCOL=TCPIP;UID=username;PWD=password;\"\n\t;\n\nibmdb.open(cn, function (err, conn) {\n\tif (err) {\n\t\treturn console.log(err);\n\t}\n\t\n\t//we now have an open connection to the database\n\t\n\tconn.close(function (err) {\n\t\tconsole.log(\"the database connection is now closed\");\n\t});\n});\n```\n\n#### .closeSync()\n\nSynchronously close the currently opened database.\n\n```javascript\nvar ibmdb = require(\"ibm_db\")()\n  , cn = \"DATABASE=database;HOSTNAME=hostname;PORT=port;PROTOCOL=TCPIP;UID=username;PWD=password;\"\n  ;\n\n//Blocks until the connection is open\nibmdb.openSync(cn);\n\n//Blocks until the connection is closed\nibmdb.closeSync();\n```\n\n#### .prepare(sql, callback)\n\nPrepare a statement for execution.\n\n* **sql** - SQL string to prepare\n* **callback** - `callback (err, stmt)`\n\nReturns a `Statement` object via the callback\n\n```javascript\nvar ibmdb = require(\"ibm_db\")\n  , cn = \"DATABASE=database;HOSTNAME=hostname;PORT=port;PROTOCOL=TCPIP;UID=username;PWD=password;\"\n  ;\n\nibmdb.open(cn,function(err,conn){\n  conn.prepare(\"insert into hits (col1, col2) VALUES (?, ?)\", function (err, stmt) {\n    if (err) {\n      //could not prepare for some reason\n      console.log(err);\n      return conn.closeSync();\n    }\n\n    //Bind and Execute the statment asynchronously\n    stmt.execute(['something', 42], function (err, result) {\n      if( err ) console.log(err);  \n      else result.closeSync();\n\n      //Close the connection\n\t  conn.close(function(err){}));\n    });\n  });\n});\n```\n\n#### .prepareSync(sql)\n\nSynchronously prepare a statement for execution.\n\n* **sql** - SQL string to prepare\n\nReturns a `Statement` object\n\n```javascript\nvar ibmdb = require(\"ibm_db\")\n  , cn = \"DATABASE=database;HOSTNAME=hostname;PORT=port;PROTOCOL=TCPIP;UID=username;PWD=password;\"\n  ;\n\nibmdb.open(cn,function(err,conn){\n  var stmt = conn.prepareSync(\"insert into hits (col1, col2) VALUES (?, ?)\");\n\n  //Bind and Execute the statment asynchronously\n  stmt.execute(['something', 42], function (err, result) {\n    result.closeSync();\n\n    //Close the connection\n\tconn.close(function(err){}));\n  });\n});\n```\n\n#### .beginTransaction(callback)\n\nBegin a transaction\n\n* **callback** - `callback (err)`\n\n#### .beginTransactionSync()\n\nSynchronously begin a transaction\n\n#### .commitTransaction(callback)\n\nCommit a transaction\n\n* **callback** - `callback (err)`\n\n```javascript\nvar ibmdb = require(\"ibm_db\")\n  , cn = \"DATABASE=database;HOSTNAME=hostname;PORT=port;PROTOCOL=TCPIP;UID=username;PWD=password;\"\n  ;\n\nibmdb.open(cn, function(err,conn) {\n\n  conn.beginTransaction(function (err) {\n    if (err) {\n      //could not begin a transaction for some reason.\n      console.log(err);\n      return conn.closeSync();\n    }\n\n    var result = conn.querySync(\"insert into customer (customerCode) values ('stevedave')\");\n\n    conn.commitTransaction(function (err) {\n      if (err) {\n        //error during commit\n        console.log(err);\n        return conn.closeSync();\n      }\n\n    console.log(conn.querySync(\"select * from customer where customerCode = 'stevedave'\"));\n\n     //Close the connection\n     conn.closeSync();\n    });\n  });\n});\n```\n\n#### .commitTransactionSync()\n\nSynchronously commit a transaction\n\n```javascript\nvar ibmdb = require(\"ibm_db\")\n  , cn = \"DATABASE=database;HOSTNAME=hostname;PORT=port;PROTOCOL=TCPIP;UID=username;PWD=password;\"\n  ;\n\nibmdb.open(cn, function(err,conn) {\n\n  conn.beginTransaction(function (err) {\n    if (err) {\n      //could not begin a transaction for some reason.\n      console.log(err);\n      return conn.closeSync();\n    }\n\n    var result = conn.querySync(\"insert into customer (customerCode) values ('stevedave')\");\n\n    conn.commitTransactionSync();\n\n    console.log(conn.querySync(\"select * from customer where customerCode = 'stevedave'\"));\n\n     //Close the connection\n    conn.closeSync();\n  });\n});\n```\n\n#### .rollbackTransaction(callback)\n\nRollback a transaction\n\n* **callback** - `callback (err)`\n\n```javascript\nvar ibmdb = require(\"ibm_db\")\n  , cn = \"DATABASE=database;HOSTNAME=hostname;PORT=port;PROTOCOL=TCPIP;UID=username;PWD=password;\"\n  ;\n\nibmdb.open(cn, function(err,conn) {\n\n  conn.beginTransaction(function (err) {\n    if (err) {\n      //could not begin a transaction for some reason.\n      console.log(err);\n      return conn.closeSync();\n    }\n\n    var result = conn.querySync(\"insert into customer (customerCode) values ('stevedave')\");\n\n    conn.rollbackTransaction(function (err) {\n      if (err) {\n        //error during rollback\n        console.log(err);\n        return conn.closeSync();\n      }\n\n    console.log(conn.querySync(\"select * from customer where customerCode = 'stevedave'\"));\n\n     //Close the connection\n     conn.closeSync();\n    });\n  });\n});\n```\n\n#### .rollbackTransactionSync()\n\nSynchronously rollback a transaction\n\n```javascript\nvar ibmdb = require(\"ibm_db\")\n  , cn = \"DATABASE=database;HOSTNAME=hostname;PORT=port;PROTOCOL=TCPIP;UID=username;PWD=password;\"\n  ;\n\nibmdb.open(cn, function(err,conn) {\n\n  conn.beginTransaction(function (err) {\n    if (err) {\n      //could not begin a transaction for some reason.\n      console.log(err);\n      return conn.closeSync();\n    }\n\n    var result = conn.querySync(\"insert into customer (customerCode) values ('stevedave')\");\n\n    conn.rollbackTransactionSync();\n\n    console.log(conn.querySync(\"select * from customer where customerCode = 'stevedave'\"));\n\n     //Close the connection\n    conn.closeSync();\n  });\n});\n```\n\n### .debug(value)\n\nEnable console logs.\n\n* **value** - true/false.\n\n```javascript\nvar ibmdb = require(\"ibm_db\")\n  , cn = \"DATABASE=dbname;HOSTNAME=hostname;PORT=port;PROTOCOL=TCPIP;UID=username;PWD=passwd\";\n\nibmdb.debug(true);  // Enable console logs.\n\nibmdb.open(cn, function (err, connection) {\n    if (err)\n    {\n        console.log(err);\n        return;\n    }\n    connection.query(\"select 1 from sysibm.sysdummy1\", function (err1, rows) {\n        if (err1) console.log(err1);\n        else console.log(rows);\n\n        ibmdb.debug(false);  // Disable console logs.\n\n        connection.close(function(err2) {\n            if(err2) console.log(err2);\n        });\n    });\n});\n```\n----------\n\n### Pool\n\nnode-ibm_db reuses node-odbc pool. \nThe node-odbc `Pool` is a rudimentary connection pool which will attempt to have\ndatabase connections ready and waiting for you when you call the `open` method.\n\nIf you use a `Pool` instance, any connection that you close will get added to \nthe list of available connections immediately. Such connection will be used \nthe next time you call `Pool.open()` for the same connection string.\n\n#### .open(connectionString, callback)\n\nGet a `Database` instance which is already connected to `connectionString`\n\n* **connectionString** - The connection string for your database\n* **callback** - `callback (err, db)`\n\n```javascript\nvar Pool = require(\"ibm_db\").Pool\n\t, pool = new Pool()\n\t, cn = \"DATABASE=database;HOSTNAME=hostname;PORT=port;PROTOCOL=TCPIP;UID=username;PWD=password;\"\n\t;\n\npool.open(cn, function (err, db) {\n\tif (err) {\n\t\treturn console.log(err);\n\t}\n\n\t//db is now an open database connection and can be used like normal\n\t//if we run some queries with db.query(...) and then call db.close();\n\t//a connection to `cn` will be re-opened silently behind the scense\n\t//and will be ready the next time we do `pool.open(cn)`\n});\n```\n\n#### .close(callback)\n\nClose all connections in the `Pool` instance\n\n* **callback** - `callback (err)`\n\n```javascript\nvar Pool = require(\"ibm_db\").Pool\n\t, pool = new Pool()\n\t, cn = \"DATABASE=database;HOSTNAME=hostname;PORT=port;PROTOCOL=TCPIP;UID=username;PWD=password;\"\n\t;\n\npool.open(cn, function (err, db) {\n\tif (err) {\n\t\treturn console.log(err);\n\t}\n\n\t//db is now an open database connection and can be used like normal\n\t//but all we will do now is close the whole pool\n\t\n\tpool.close(function () {\n\t\tconsole.log(\"all connections in the pool are closed\");\n\t});\n});\n```\nbuild options\n-------------\n\n### Debug\n\nIf you would like to enable debugging messages to be displayed you can add the \nflag `DEBUG` to the defines section of the `binding.gyp` file and then execute \n`node-gyp rebuild`.\n\n```javascript\n<snip>\n'defines' : [\n  \"DEBUG\"\n],\n<snip>\n```\n### Unicode\n\nBy default, UNICODE suppport is enabled. This should provide the most accurate\nway to get Unicode strings submitted to your database. For best results, you \nmay want to put your Unicode string into bound parameters. \n\nHowever, if you experience issues or you think that submitting UTF8 strings will\nwork better or faster, you can remove the `UNICODE` define in `binding.gyp`\n\n```javascript\n<snip>\n'defines' : [\n  \"UNICODE\"\n],\n<snip>\n```\n\n### timegm vs timelocal\n\nWhen converting a database time to a C time one may use `timegm` or `timelocal`. See\n`man timegm` for the details of these two functions. By default the node-ibm_db bindings\nuse `timelocal`. If you would prefer for it to use `timegm` then specify the `TIMEGM`\ndefine in `binding.gyp`\n\n```javascript\n<snip>\n'defines' : [\n  \"TIMEGM\"\n],\n<snip>\n```\n\n### Strict Column Naming\n\nWhen column names are retrieved from DB2 CLI, you can request by SQL_DESC_NAME or\nSQL_DESC_LABEL. SQL_DESC_NAME is the exact column name or none if there is none\ndefined. SQL_DESC_LABEL is the heading or column name or calculation. \nSQL_DESC_LABEL is used by default and seems to work well in most cases.\n\nIf you want to use the exact column name via SQL_DESC_NAME, enable the `STRICT_COLUMN_NAMES`\ndefine in `binding.gyp`\n\n```javascript\n<snip>\n'defines' : [\n  \"STRICT_COLUMN_NAMES\"\n],\n<snip>\n```\n\ntips\n----\n### Using node < v0.10 on Linux\n\nBe aware that through node v0.9 the uv_queue_work function, which is used to \nexecute the ODBC functions on a separate thread, uses libeio for its thread \npool. This thread pool by default is limited to 4 threads.\n\nThis means that if you have long running queries spread across multiple \ninstances of ibmdb.Database() or using odbc.Pool(), you will only be able to \nhave 4 concurrent queries.\n\nYou can increase the thread pool size by using @developmentseed's [node-eio]\n(https://github.com/developmentseed/node-eio).\n\n#### install: \n```bash\nnpm install eio\n```\n\n#### usage:\n```javascript\nvar eio = require('eio'); \neio.setMinParallel(threadCount);\n```\n\ncontributors\n------\n* Dan VerWeire (dverweire@gmail.com)\n* Lee Smith (notwink@gmail.com)\n* Bruno Bigras\n* Christian Ensel\n* Yorick\n* Joachim Kainz\n* Oleg Efimov\n* paulhendrix\n* IBM\n\nlicense\n-------\n\nCopyright (c) 2013 Dan VerWeire <dverweire@gmail.com>\n\nCopyright (c) 2010 Lee Smith <notwink@gmail.com>\n\nCopyright (c) 2014 IBM Corporation <opendev@us.ibm.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of \nthis software and associated documentation files (the \"Software\"), to deal in \nthe Software without restriction, including without limitation the rights to \nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR \nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER \nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "_id": "ibm_db@0.0.19",
  "_shasum": "6f8324f72422b3676972f3b06d94574d4def91a3",
  "_from": "git+https://git@github.com/ibmdb/node-ibm_db.git",
  "_resolved": "git+https://git@github.com/ibmdb/node-ibm_db.git#0141a4241db40bddffaa677f02cbc50441ebc08f"
}
